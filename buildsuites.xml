<?xml version="1.0" encoding="UTF-8"?>
<project>

    <!--******************************************************************************************-->
    <!-- Module test targets -->
    <!--******************************************************************************************-->

    <!--******************************************************************************************-->
    <!-- Test repository management -->
    <!--******************************************************************************************-->

    <property name="module.tests.dir" value="ModuleTests" />

    <!-- We need to do a clone first for the case where we're starting clean (this will fail if -->
    <!-- the local repo already exists), and then pull to update for the case where the local -->
    <!-- module repositories already exist -->
    <macrodef name="clone-repo">
        <attribute name="git.organization.url" default="https://github.com/genepattern" />
        <attribute name="git.repo.name" />
        <attribute name="git.branch.name" default="master" />
        <sequential>
            <echo>Pulling tests from remote repository: '@{git.organization.url}/@{git.repo.name}' (branch '@{git.branch.name}')</echo>
            <exec executable="git" dir="${module.tests.dir}" failonerror="false" >
                <arg line="clone" />
                <arg line="-b @{git.branch.name}" />
                <arg line="@{git.organization.url}/@{git.repo.name}.git"/>
                <arg line="@{git.repo.name}" />
            </exec>
            <exec executable="git" dir="${module.tests.dir}/@{git.repo.name}">
                <arg line="pull" />
            </exec>
        </sequential>
    </macrodef>

    <target name="clone-test-repos" unless="noclonetests" depends="package">
        <mkdir dir="${module.tests.dir}" />
        <clone-repo git.repo.name="ComparativeMarkerSelection" />
        <clone-repo git.repo.name="ExpressionFileCreator" />
        <clone-repo git.repo.name="HierarchicalClustering" />
        <clone-repo git.repo.name="TopHat" />
        <clone-repo git.repo.name="ABSOLUTE" />
        <clone-repo git.repo.name="MergeHTSeqCounts" />
    </target>

    <target name="clean-test-repos">
        <delete dir="${module.tests.dir}" />
    </target>

    <!--******************************************************************************************-->
    <!-- Test targets for individual modules. Each module has a fileset definition and a run target -->
    <!--******************************************************************************************-->

    <fileset id="nightlyMergeHTSeqCountsTests" dir="${gpunit.dir}/${module.tests.dir}/MergeHTSeqCounts/gpunit" >
        <!--ABSOLUTE v2 -->
        <include name="weekly_test_paper_data_66524.yml" />
    </fileset>

    <target name="nightly-absolute-tests" depends="package, clone-test-repos" >
        <pathconvert property="nightly.tests" refid="nightlyMergeHTSeqCountsTests" />
        <run-tests
                testcases="${weekly.tests}"
                numThreads="5"
                shutdownTimeout="${gpunit.shutdownTimeout}"
                />
    </target>

    <fileset id="weeklyABSOLUTETests" dir="${gpunit.dir}/${module.tests.dir}/ABSOLUTE/gpunit" >
        <!--ABSOLUTE v2 -->
        <include name="v2/weekly_test_paper_data_66524.yml" />
    </fileset>

    <target name="weekly-absolute-tests" depends="package, clone-test-repos" >
        <pathconvert property="weekly.tests" refid="weeklyABSOLUTETests" />
        <run-tests
                testcases="${weekly.tests}"
                numThreads="5"
                shutdownTimeout="${gpunit.shutdownTimeout}"
                />
    </target>

    <fileset id="ShortComparativeMarkerSelectionTests" dir="${gpunit.dir}/${module.tests.dir}/ComparativeMarkerSelection/gpunit" >
    <!-- ComparativeMarkerSelection v10 -->
    <include name="DefaultSmokeTest_Protocol/valid_pset_1_test.yml" />
</fileset>

    <target name="short-cms-tests" depends="package, clone-test-repos">
        <pathconvert property="short.nightly.tests" refid="ShortComparativeMarkerSelectionTests" />
        <run-tests
                testcases="${short.nightly.tests}"
                numThreads="5"
                shutdownTimeout="${gpunit.shutdownTimeout}"
                />
    </target>

    <fileset id="ShortExpressionFileCreatorTests" dir="${gpunit.dir}/${module.tests.dir}/ExpressionFileCreator/gpunit" >
        <!-- ExpressionFileCreator - v13 smoke tests only -->
        <include name="smoke_invalid_AP_noMM_test.yml" />
        <include name="smoke_invalid_GCRMA_and_CDF_test.yml" />
        <include name="smoke_RT150777_regression_test.yml" />
        <include name="smoke_valid_pset_1_test.yml" />
        <include name="smoke_valid_pset_2_test.yml" />
        <include name="smoke_valid_pset_4_test.yml" />
        <include name="smoke_valid_pset_5_test.yml" />
        <include name="smoke_valid_pset_6_test.yml" />
        <include name="smoke_valid_pset_9_test.yml" />
        <include name="smoke_valid_pset_10_test.yml" />
        <include name="smoke_valid_pset_11_test.yml" />
        <include name="smoke_valid_pset_12_test.yml" />
        <include name="smoke_valid_pset_13_test.yml" />
        <include name="smoke_valid_pset_14_test.yml" />
    </fileset>

    <target name="short-efc-tests" depends="package, clone-test-repos">
        <pathconvert property="short.nightly.tests" refid="ShortExpressionFileCreatorTests" />
        <run-tests
            testcases="${short.nightly.tests}"
            numThreads="5"
            shutdownTimeout="${gpunit.shutdownTimeout}"
        />
    </target>

    <fileset id="ShortHierarchicalClusteringTests" dir="${gpunit.dir}/${module.tests.dir}/HierarchicalClustering/gpunit" >
        <!-- HierarchicalClustering - v6 ColOriented -->
        <include name="col_oriented/valid_pset_1_test.yml" />
        <include name="col_oriented/valid_pset_2_test.yml" />
        <include name="col_oriented/valid_pset_3_test.yml" />
        <include name="col_oriented/valid_pset_4_test.yml" />
        <include name="col_oriented/valid_pset_5_test.yml" />
        <include name="col_oriented/valid_pset_6_test.yml" />
        <include name="col_oriented/valid_pset_7_test.yml" />
        <include name="col_oriented/valid_pset_8_test.yml" />
        <!-- HierarchicalClustering v6 - RowOriented -->
        <include name="row_oriented/valid_pset_1_test.yml" />
        <include name="row_oriented/valid_pset_2_test.yml" />
        <include name="row_oriented/valid_pset_3_test.yml" />
        <include name="row_oriented/valid_pset_4_test.yml" />
        <include name="row_oriented/valid_pset_5_test.yml" />
        <include name="row_oriented/valid_pset_6_test.yml" />
        <include name="row_oriented/valid_pset_7_test.yml" />
        <include name="row_oriented/valid_pset_8_test.yml" />
    </fileset>

    <target name="short-hc-tests" depends="package, clone-test-repos">
        <pathconvert property="short.nightly.tests" refid="ShortHierarchicalClusteringTests" />
        <run-tests
            testcases="${short.nightly.tests}"
            numThreads="5"
            shutdownTimeout="${gpunit.shutdownTimeout}"
        />
    </target>

    <fileset id="ShortTopHatTests" dir="${gpunit.dir}/${module.tests.dir}/TopHat/gpunit/" >
        <!-- TopHat v9 -->
        <!-- this test has the smallest output folder -->
        <include name="smoke_valid_pset_13_test.yml" />
    </fileset>

    <!-- run all 13 or so short tophat tests -->
    <fileset id="MoreShortTopHatTests" dir="${gpunit.dir}/${module.tests.dir}/TopHat/gpunit/" >
        <!-- TopHat v9 -->

        <include name="smoke_valid_pset_1_test.yml" />
        <include name="smoke_valid_pset_2_test.yml" />
        <include name="smoke_valid_pset_3_test.yml" />
        <include name="smoke_valid_pset_4_test.yml" />
        <include name="smoke_valid_pset_5_test.yml" />
        <include name="smoke_valid_pset_6_test.yml" />
        <include name="smoke_valid_pset_7_test.yml" />
        <include name="smoke_valid_pset_8_test.yml" />
        <include name="smoke_valid_pset_9_test.yml" />
        <include name="smoke_valid_pset_10_test.yml" />
        <include name="smoke_valid_pset_11_test.yml" />
        <include name="smoke_valid_pset_12_test.yml" />
        <include name="smoke_valid_pset_13_test.yml" />
        <!-- Removed until we fix the TopHat module perl wrapper script to be able to handle -->
        <!-- a transcriptome_index passed by URL (as opposed to a server-local file reference). -->
        <!--
            <include name="smoke_valid_pset_14_test.yml" />
        -->
        <include name="smoke_valid_pset_15_test.yml" />
    </fileset>

    <target name="short-tophat-tests" depends="package, clone-test-repos">
        <pathconvert property="short.nightly.tests" refid="ShortTopHatTests" />
        <run-tests
            testcases="${short.nightly.tests}"
            numThreads="5"
            shutdownTimeout="${gpunit.shutdownTimeout}"
        />
    </target>

    <!--******************************************************************************************-->
    <!-- Aggregate test suite target definitions. Set "noclonetests" to skip the git phase. -->
    <!--******************************************************************************************-->

    <!-- Regression tests in Jenkins -->
    <target name="short-nightly-tests" depends="package, clone-test-repos">
        <union id="short.tests">
            <resources refid="ShortComparativeMarkerSelectionTests" />
            <resources refid="ShortExpressionFileCreatorTests" />
            <resources refid="ShortHierarchicalClusteringTests" />
            <resources refid="ShortTopHatTests" />
            <resources refid="nightlyMergeHTSeqCountsTests" />
        </union>
        <!-- The GpUnit code parses filesets using the value returned by a call to File.pathSeparator() -->
    	<!-- as the delimiter. This returns ";" on Windows and ":" on Linux. However, ant creates filesets -->
    	<!-- with ";" as the separator on both platforms (!). The pathconvert task transforms the fileset -->
    	<!-- to one with a delimiter that properly matches what the code expects. -->
        <pathconvert property="short.nightly.tests" refid="short.tests" />
        <run-tests
            testcases="${short.nightly.tests}"
            numThreads="5"
            shutdownTimeout="${gpunit.shutdownTimeout}"
        />
    </target>

    <target name="nightly-smoke-tests" depends="package, clone-test-repos">
        <union id="smoke.tests">
            <!--resources refid="ShortABSOLUTETests" /-->
        </union>
        <pathconvert property="nightly.smoke.tests" refid="smoke.tests" />
        <run-tests
                testcases="${nightly.smoke.tests}"
                numThreads="5"
                shutdownTimeout="${gpunit.shutdownTimeout}"
                />
    </target>

    <target name="weekly-tests" depends="package, clone-test-repos">
        <union id="weekly.tests">
            <resources refid="weeklyABSOLUTETests" />
        </union>
        <pathconvert property="weekly.tests" refid="weekly.tests" />
        <run-tests
                testcases="${weekly.tests}"
                numThreads="5"
                shutdownTimeout="${gpunit.shutdownTimeout}"
                />
    </target>

</project>
