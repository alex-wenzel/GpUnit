<?xml version="1.0" encoding="UTF-8"?>
<project name="gp-unit" default="package">
    <property name="gpunit.dir" location="./" />
    <property name="gpunit.properties" value="gpunit.properties" />
    <property file="${gpunit.properties}" />

    <property name="gp.host" value="gpdev.broadinstitute.org" />
    <property name="gp.port" value="" />
    <property name="gp.user" value="test" />
    <property name="gp.password" value="test" />

    <property name="gp.url" value="http://${gp.host}${gp.port}" />
    <property name="local.dir" location="${gpunit.dir}/tmp/${gp.host}" />
    <property name="client.lib.dir" location="${local.dir}/client" />
    <!-- if the client.dir already exists, skip the rest -->
    <available property="gp-client-lib-exists" file="${client.lib.dir}/GenePattern.jar" />
    <property name="report.dir" value="reports" />
    
    <path id="gp.client.classpath">
        <pathelement location="${client.lib.dir}/GenePattern.jar" />
        <fileset dir="${client.lib.dir}/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="gpunit.classpath">
        <pathelement location="${gpunit.dir}/classes"/>
        <fileset dir="${gpunit.dir}/lib">
            <include name="**/*.jar"/>
        </fileset>
        <path refid="gp.client.classpath" />
    </path>

    <target name="init">
<echo>initializing directories ...
local.dir: ${local.dir}
report.dir: ${report.dir} 
</echo>

        <tstamp />
        <mkdir dir="${gpunit.dir}/classes" />
        <mkdir dir="${gpunit.dir}/dist" />
        <mkdir dir="${client.lib.dir}" />
        <mkdir dir="${report.dir}" />
        
        <!-- initialize properties for a batch run -->
        <property name="gpunit.client" value="SOAP" />
        <property name="gpunit.outputdir" value="./jobResults" />
        <property name="gpunit.batch.name" value="run_${DSTAMP}_${TSTAMP}" />
        <property name="gpunit.save.downloads" value="false" />
        <property name="gpunit.delete.jobs" value="true" />
        
        <property name="gpunit.upload.dir" value="" />
        <property name="gpunit.server.dir" value="" />
        
    </target>

    <!-- in order to compile gp-unit, and to run gp-unit tests, must download the client library, 
         for SOAP client calls to the GP server -->
    <target name="gp-client-lib" depends="init" unless="gp-client-lib-exists">
        <description>If necessary, download the Java Programming Library from the server, and unzip into a local directory</description>

        <property name="http.url" value="${gp.url}/gp/downloads/GenePattern.zip" />
        <get src="${http.url}" dest="${local.dir}/GenePattern.zip" usetimestamp="true" />
        <unzip src="${local.dir}/GenePattern.zip" dest="${client.lib.dir}" overwrite="true" />
    </target>

    <!-- gpunit depends on the json.org library, 
         for REST client calls to the GP server -->
    <target name="compile-json" depends="init">
        <property name="java.target" value="1.5" />
        <javac debug="true"
            srcdir="${gpunit.dir}/src/3rd-party/org.json" 
            destdir="${gpunit.dir}/classes" 
            includeantruntime="false"
            target="${java.target}" 
            source="${java.target}" 
            classpathref="gpunit.classpath" >
        </javac>
    </target>

    <target name="compile" depends="init, gp-client-lib, compile-json">
        <property name="java.target" value="1.5" />
        <javac debug="true" includeantruntime="false"
            defaultexcludes="true" 
            deprecation="true" 
            destdir="${gpunit.dir}/classes" 
            optimize="false" 
            proceed="false" 
            srcdir="${gpunit.dir}/src/main/java" 
            target="${java.target}" 
            source="${java.target}" 
            classpathref="gpunit.classpath" >
        </javac>
    </target>

    <target name="package" depends="compile">
        <jar basedir="${gpunit.dir}/classes" jarfile="${gpunit.dir}/dist/gp-unit.jar" />
    </target>

    <target name="clean">
        <delete dir="${gpunit.dir}/classes" />
        <delete dir="${gpunit.dir}/dist" />
        <delete dir="${gp.annotations.dir}/classes" />
        <delete dir="${gp.annotations.dir}/dist" />
        <delete dir="${report.dir}" />
    </target>
    <!-- END build gp-unit.jar -->

    <!-- run a batch of gp-unit tests via SOAP client requests 
         use a single parameterized jUnit test to submit the jobs and validate the results.
         
         To run the tests, create a path, give it a refid, then create a property from that refid.
         Look at the gpunit-all-protocols target for an example. 
      -->
    <macrodef name="run-tests">
        <attribute name="testcases" />
        <attribute name="numthreads" default="16" />
        <!-- when running jobs in parallel, this is the max time in seconds to wait before finishing the test -->
        <attribute name="shutdowntimeout" default="300" /> 
        <attribute name="junit.formatter" default="xml" /> <!-- 'brief' | 'xml' | 'html' -->
        <attribute name="showoutput" default="true" />
        <attribute name="usefile" default="true" />
        <sequential>
            <echo>testcases: @{testcases}</echo>
            <echo>junit.formatter: @{junit.formatter}</echo>

            <property name="gpunit.classpath.prop" refid="gpunit.classpath" /> 
            <echo>gpunit.classpath: ${gpunit.classpath.prop}</echo>

            <junit fork="yes" printsummary="on" haltonfailure="false" showoutput="@{showoutput}" logfailedtests="true" failureProperty="test.failure" >
                <formatter type="@{junit.formatter}" usefile="@{usefile}" />
                <test name="org.genepattern.gpunit.test.BatchModuleTest" outfile="TEST-all" />
                <classpath refid="gpunit.classpath" />
                <sysproperty key="gpunit.testcase.dirs" value="@{testcases}" />
                <sysproperty key="junit.parallel.threads" value="@{numthreads}" />
                <sysproperty key="junit.parallel.shutdown.timeout" value="@{shutdowntimeout}" />

                <sysproperty key="genePatternUrl" value="${gp.url}" />
                <sysproperty key="username" value="${gp.user}" />
                <sysproperty key="password" value="${gp.password}" />
                
                <sysproperty key="gpunit.client" value="${gpunit.client}" />
                <sysproperty key="gpunit.outputdir" value="${gpunit.outputdir}" />
                <sysproperty key="gpunit.batch.name" value="${gpunit.batch.name}" />
                <sysproperty key="gpunit.save.downloads" value="${gpunit.save.downloads}" />
                <sysproperty key="gpunit.delete.jobs" value="${gpunit.delete.jobs}" />
                
                <sysproperty key="gpunit.upload.dir" value="${gpunit.upload.dir}" />
                <sysproperty key="gpunit.server.dir" value="${gpunit.server.dir}" />
            </junit>

            <junitreport todir="${report.dir}">
                <fileset dir="${report.dir}">
                    <include name="TEST-*.xml"/>
                </fileset>
                <report format="frames" todir="${report.dir}/html"/>
            </junitreport>

            <fail if="test.failure" message="junit test failed" />
        </sequential> 
    </macrodef>
    
    <target name="gpunit-all-protocols" depends="package">
        <path id="all-protocols.path">
            <pathelement location="./tests/protocols" />
        </path>
        <property name="all-protocols.testcases" refid="all-protocols.path" /> 
        <property name="gpunit.numthreads" value="32" />
        <!-- the max amount of time to wait, in seconds, before terminating the unit test -->
        <property name="gpunit.shutdowntimeout" value="300" />
        <run-tests 
            testcases="${all-protocols.testcases}" 
            numthreads="${gpunit.numthreads}" 
            shutdowntimeout="${gpunit.shutdowntimeout}"
        />
    </target>

    <target name="gpunit-saved-jobs" depends="package">
        <path id="saved-jobs.path">
            <pathelement location="./tests/saved_jobs" />
        </path>
        <property name="saved-jobs.testcases" refid="saved-jobs.path" /> 
        <run-tests testcases="${saved-jobs.testcases}" />
    </target>
    
    <target name="gpunit-gistic-workshop" depends="package">
        <path id="tests.path">
            <!-- pathelement location="./tests/GISTIC/workshop_2012_06_05/from_saved_jobs/13479" / -->
            <!-- pathelement location="./tests/GISTIC/workshop_2012_06_05/test_cases" / -->
            <pathelement location="./tests/GISTIC/workshop_2012_06_05/from_saved_jobs/13734" />
        </path>
        <!-- the max amount of time to wait, in seconds, before terminating the unit test -->
        <property name="gpunit.shutdowntimeout" value="30" />
        <property name="tests.testcases" refid="tests.path" /> 
        <run-tests testcases="${tests.testcases}"
            shutdowntimeout="${gpunit.shutdowntimeout}" />
    </target>

    <target name="gpunit" depends="package">
        <property name="gpunit.testfolder" location="./tests" />
        <path id="testfolder.path">
            <pathelement location="${gpunit.testfolder}" />
        </path>
        <property name="testcases" refid="testfolder.path" /> 
        <run-tests testcases="${testcases}" />
    </target>
    
    <target name="gpunit-cufflinks" depends="package">
        <path id="testfolder.path">
            <pathelement location="${gpunit.testfolder}" />
        </path>
        <property name="testcases" refid="testfolder.path" />
        <property name="gpunit.numthreads" value="32" />
        <!-- the max amount of time to wait, in seconds, before terminating the unit test -->
        <property name="gpunit.shutdowntimeout" value="1800" />
        <run-tests 
            testcases="${testcases}" 
            numthreads="${gpunit.numthreads}" 
            shutdowntimeout="${gpunit.shutdowntimeout}"
        />
    </target>

</project>
