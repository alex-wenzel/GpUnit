<?xml version="1.0" encoding="UTF-8"?>
<project name="gp-unit" default="package">
    <dirname property="project.basedir" file="${ant.file.gp-unit}"/>
    <property file="${project.basedir}/gpunit.default.properties" />
    <property name="gpunit.dir" location="./" />
    <!-- 
      - Always load the 'gpunit.default.properties' file first, then
      - load the gpunit.properties file, which can be optionally be
      - replaced with a different file, e.g.
      -      '-Dgpunit.properties=my.gpunit.properties'
      - NOTE: The GpUnit code in BatchProperties.java implements this
      - same behavior (loading gpunit.default.properties followed by
      - whatever other file is specified). Any change to the sequence
      - made here should be reflected there as well.
     -->
    <property name="gpunit.properties" value="gpunit.properties" />
    <property file="${gpunit.properties}" />

    <property name="gp.host" value="127.0.0.1" />
    <property name="gp.port" value="" />
    <property name="gp.user" value="test" />
    <property name="gp.password" value="test" />

    <property name="gp.url" value="http://${gp.host}${gp.port}" />
    <property name="local.dir" location="${gpunit.dir}/tmp/${gp.host}" />
    <property name="client.lib.dir" location="${local.dir}/client" />
    <!-- if the client.dir already exists, skip the rest -->
    <available property="gp-client-lib-exists" file="${client.lib.dir}/GenePattern.jar" />
    <property name="report.dir" value="reports" />
    
    <path id="gp.client.classpath">
        <pathelement location="${client.lib.dir}/GenePattern.jar" />
        <fileset dir="${client.lib.dir}/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="gpunit.classpath">
        <pathelement location="${gpunit.dir}/classes"/>
        <fileset dir="${gpunit.dir}/lib">
            <include name="**/*.jar"/>
        </fileset>
        <path refid="gp.client.classpath" />
    </path>

    <target name="init">
        <echo>initializing directories ... </echo>
        <echo>local.dir: ${local.dir} </echo>
        <echo>report.dir: ${report.dir} </echo>

        <tstamp />
        <mkdir dir="${gpunit.dir}/classes" />
        <mkdir dir="${gpunit.dir}/dist" />
        <mkdir dir="${client.lib.dir}" />
        <mkdir dir="${report.dir}" />
        
        <!-- initialize properties for a batch run -->
        <property name="gpunit.client" value="SOAP" />
        <property name="gpunit.outputdir" value="./jobResults" />
        <property name="gpunit.batch.name" value="run_${DSTAMP}_${TSTAMP}" />
        <property name="gpunit.save.downloads" value="false" />
        <property name="gpunit.delete.jobs" value="false" />
        <property name="report.run.dir" location="${report.dir}/${gpunit.batch.name}" />
        <mkdir dir="${report.run.dir}" />
        <symlink link="${report.dir}/current" resource="${report.run.dir}" overwrite="true" failonerror="false" />
        <mkdir dir="${gpunit.outputdir}" />
        <symlink link="${gpunit.outputdir}/current" resource="${gpunit.batch.name}" overwrite="true" failonerror="false" />
        
        <property name="gpunit.upload.dir" value="" />
        <property name="gpunit.server.dir" value="" />
        
        <property name="gpunit.numThreads" value="" />
        <!-- timeout intervals in seconds, when set to the empty string, use default values built into GpUnit -->
        <property name="gpunit.shutdownTimeout" value="" /> <!-- Global timeout, exit junit after this timeout period. -->
        <property name="gpunit.jobCompletionTimeout" value="" /> <!-- Job poll timeout, stop polling for GP job completion after this timeout -->
        <property name="gpunit.testTimeout" value="" /> <!-- Junit test timeout, fail an indidivual junit test when this timeout is reached -->
    </target>

    <!-- in order to compile gp-unit, and to run gp-unit tests, must download the client library, 
         for SOAP client calls to the GP server -->
    <target name="gp-server-online">
        <description>Check that there is a server running at the 'gp.url'</description>
        <condition property="gp-server-online">
            <http url="${gp.url}/gp/" />
        </condition>
        <fail unless="gp-server-online" message="Server is not online: ${gp.url}/gp/" />
    </target>

    <target name="gp-client-lib" depends="init,gp-server-online" unless="gp-client-lib-exists">
        <description>If necessary, download the Java Programming Library from the server, and unzip into a local directory</description>

        <property name="http.url" value="${gp.url}/gp/downloads/GenePattern.zip" />
        <get src="${http.url}" dest="${local.dir}/GenePattern.zip" usetimestamp="true" />
        <unzip src="${local.dir}/GenePattern.zip" dest="${client.lib.dir}" overwrite="true" />
    </target>

    <target name="compile" depends="init, gp-client-lib">
        <property name="java.target" value="1.5" />
        <javac debug="true" includeantruntime="false"
            defaultexcludes="true" 
            deprecation="true" 
            destdir="${gpunit.dir}/classes" 
            optimize="false" 
            proceed="false" 
            srcdir="${gpunit.dir}/src/main/java" 
            target="${java.target}" 
            source="${java.target}" 
            classpathref="gpunit.classpath" >
        </javac>
    </target>

    <target name="package" depends="compile">
        <jar basedir="${gpunit.dir}/classes" jarfile="${gpunit.dir}/dist/gp-unit.jar" />
    </target>

    <target name="clean">
        <delete dir="${gpunit.dir}/classes" />
        <delete dir="${gpunit.dir}/dist" />
        <delete dir="${gp.annotations.dir}/classes" />
        <delete dir="${gp.annotations.dir}/dist" />
        <delete dir="${report.dir}" />
        <delete dir="${gpunit.outputdir}" />
        <delete file="System.out" />
    </target>
    <!-- END build gp-unit.jar -->

    <!-- run a batch of gp-unit tests via SOAP client requests 
         use a single parameterized jUnit test to submit the jobs and validate the results.
         
         To run the tests, create a path, give it a refid, then create a property from that refid.
         Look at the gpunit-all-protocols target for an example. 
      -->
    <macrodef name="run-tests">
        <attribute name="testcases" />
        <attribute name="numThreads" default="${gpunit.numThreads}" />
        <!-- when running jobs in parallel, this is the max time in seconds to wait before finishing the test -->
        <attribute name="shutdownTimeout" default="${gpunit.shutdownTimeout}" /> 
        <attribute name="junit.formatter" default="xml" /> <!-- 'brief' | 'xml' | 'html' -->
        <attribute name="showoutput" default="true" />
        <attribute name="usefile" default="true" />
        <sequential>
            <echo>Running tests as '${gp.user}' on '${gp.url}'</echo>
            <echo>testcases: @{testcases}</echo>
            <echo>junit.formatter: @{junit.formatter}</echo>

            <property name="gpunit.classpath.prop" refid="gpunit.classpath" /> 

            <junit fork="yes" printsummary="on" haltonfailure="false" showoutput="@{showoutput}" logfailedtests="true" failureProperty="test.failure" >
                <formatter type="@{junit.formatter}" usefile="@{usefile}" />
                <test name="org.genepattern.gpunit.test.BatchModuleTest" outfile="TEST-all" todir="${report.run.dir}"/>
                <classpath refid="gpunit.classpath" />
                <sysproperty key="gpunit.testcase.dirs" value="@{testcases}" />

                <sysproperty key="genePatternUrl" value="${gp.url}" />
                <sysproperty key="username" value="${gp.user}" />
                <sysproperty key="password" value="${gp.password}" />
                
                <sysproperty key="gpunit.client" value="${gpunit.client}" />
                <sysproperty key="gpunit.outputdir" value="${gpunit.outputdir}" />
                <sysproperty key="gpunit.batch.name" value="${gpunit.batch.name}" />
                <sysproperty key="gpunit.save.downloads" value="${gpunit.save.downloads}" />
                <sysproperty key="gpunit.delete.jobs" value="${gpunit.delete.jobs}" />
                
                <sysproperty key="gpunit.upload.dir" value="${gpunit.upload.dir}" />
                <sysproperty key="gpunit.server.dir" value="${gpunit.server.dir}" />
                
                <sysproperty key="gpunit.numThreads" value="@{numThreads}" />
                <sysproperty key="gpunit.shutdownTimeout" value="@{shutdownTimeout}" />
                <sysproperty key="gpunit.testTimeout" value="${gpunit.testTimeout}" />
                <sysproperty key="gpunit.jobCompletionTimeout" value="${gpunit.jobCompletionTimeout}" />
                <sysproperty key="gpunit.properties" value="${gpunit.properties}" />
                <!-- GpUnit uses project.basedir to find gpunit.default.properties -->
                <sysproperty key="project.basedir" value="${project.basedir}" />
                <syspropertyset>
                    <propertyref builtin="commandline"/>
                </syspropertyset>
            </junit>

            <junitreport todir="${report.run.dir}">
                <fileset dir="${report.run.dir}">
                    <include name="TEST-*.xml"/>
                </fileset>
                <report format="frames" todir="${report.run.dir}/html"/>
            </junitreport>

            <fail if="test.failure" message="junit test failed" />
        </sequential> 
    </macrodef>
    
    <target name="gpunit-all-protocols" depends="package">
        <path id="all-protocols.path">
            <pathelement location="./tests/protocols" />
        </path>
        <property name="all-protocols.testcases" refid="all-protocols.path" /> 
        <!-- the max amount of time to wait, in seconds, before terminating the unit test -->
        <run-tests 
            testcases="${all-protocols.testcases}" 
            numThreads="5" 
            shutdownTimeout="${gpunit.shutdownTimeout}"
        />
    </target>

    <target name="gpunit-saved-jobs" depends="package">
        <path id="saved-jobs.path">
            <pathelement location="./tests/saved_jobs" />
        </path>
        <property name="saved-jobs.testcases" refid="saved-jobs.path" /> 
        <run-tests testcases="${saved-jobs.testcases}" />
    </target>
    
    <target name="gpunit" depends="package,gp-server-online">
        <property name="gpunit.testfolder" location="./tests" />
        <path id="testfolder.path">
            <pathelement location="${gpunit.testfolder}" />
        </path>
        <property name="testcases" refid="testfolder.path" /> 
        <run-tests testcases="${testcases}"
            numThreads="${gpunit.numThreads}" 
            shutdownTimeout="${gpunit.shutdownTimeout}" />
    </target>
    
    <target name="gpunit-cufflinks" depends="package">
        <path id="testfolder.path">
            <pathelement location="${gpunit.testfolder}" />
        </path>
        <property name="testcases" refid="testfolder.path" />
        <run-tests 
            testcases="${testcases}" 
            numthreads="5" 
            shutdownTimeout="1800"
        />
    </target>

    <target name="compile-automatrix" depends="package">
        <!-- For the interim, just copy the locally built gp-unit.jar over the archived one in the automatrix -->
        <!-- lib dir, and then try to compile automatrix. -->
        <copy file="${gpunit.dir}/dist/gp-unit.jar" todir="./automatrix/website/WEB-INF/lib" />
        <ant antfile="automatrix/build.xml" target="createWar" useNativeBasedir="true" />
    </target>

    <target name="gpunit-junit-tests" depends="package">
        <junit showoutput="true" printsummary="true" >
            <classpath>
                <pathelement location="${gpunit.dir}/classes"/>
                <fileset dir="${gpunit.dir}/src/test/lib" >
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="./lib">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement location="${client.lib.dir}/GenePattern.jar" />
            </classpath>
            <test name="org.genepattern.gpunit.yaml.PropertyExpansionTests" outfile="TEST-all" todir="./junit" />
        </junit>
    </target>

	<!-- Nightly module test targets -->
    <!-- We want to clone repositories for newly added modules and checkout/pull any existing ones" -->
    <property name="module.tests.dir" value="ModuleTests" />
	<macrodef name="pull-test">
        <attribute name="git.organization.url" default="https://github.com/genepattern" />
		<attribute name="git.repo.name" />
		<attribute name="git.branch.name" default="master" />
        <sequential>
            <echo>Pulling tests from remote repository: '@{git.organization.url}/@{git.repo.name}' (branch '@{git.branch.name}')</echo>
            <exec executable="git" dir="${module.tests.dir}" failonerror="false" >
                <arg line="clone" />
                <arg line="-b @{git.branch.name}" />
                <arg line="@{git.organization.url}/@{git.repo.name}.git"/>
                <arg line="@{git.repo.name}" />
            </exec>
            <exec executable="git" dir="${module.tests.dir}/@{git.repo.name}">
                <arg line="pull" />
            </exec>
        </sequential>
    </macrodef>

    <!-- Test category "Short Running Modules Tests" -->
	<!-- Once the protocol for how we organize these is established, these targets will be moved into a separate build file -->
    <target name="checkout-short-nightly-tests" unless="nocheckouttests" depends="package">
        <mkdir dir="${module.tests.dir}" />
        <pull-test git.repo.name="ComparativeMarkerSelection" />
        <pull-test git.repo.name="ExpressionFileCreator" />
        <pull-test git.repo.name="HierarchicalClustering" />
        <pull-test git.repo.name="TopHat" />
    </target>

	<fileset id="ShortComparativeMarkerSelectionTests" dir="${gpunit.dir}/${module.tests.dir}/ComparativeMarkerSelection/v10/gpunit" >
        <!-- ComparativeMarkerSelection v10 -->
        <include name="DefaultSmokeTest_Protocol/valid_pset_1_test.yml" />
    </fileset>

    <target name="run-short-cms-tests" depends="package, checkout-short-nightly-tests">
        <pathconvert property="short.nightly.tests" refid="ShortComparativeMarkerSelectionTests" />
        <run-tests
            testcases="${short.nightly.tests}"
            numThreads="5"
            shutdownTimeout="${gpunit.shutdownTimeout}"
        />
    </target>

	<fileset id="ShortExpressionFileCreatorTests" dir="${gpunit.dir}/${module.tests.dir}/ExpressionFileCreator/v13/gpunit" >
        <!-- ExpressionFileCreator - v13 smoke tests only -->
        <include name="smoke_invalid_AP_noMM_test.yml" />
        <include name="smoke_invalid_GCRMA_and_CDF_test.yml" />
        <include name="smoke_RT150777_regression_test.yml" />
        <include name="smoke_valid_pset_1_test.yml" />
        <include name="smoke_valid_pset_2_test.yml" />
        <include name="smoke_valid_pset_4_test.yml" />
        <include name="smoke_valid_pset_5_test.yml" />
        <include name="smoke_valid_pset_6_test.yml" />
        <include name="smoke_valid_pset_9_test.yml" />
        <include name="smoke_valid_pset_10_test.yml" />
        <include name="smoke_valid_pset_11_test.yml" />
        <include name="smoke_valid_pset_12_test.yml" />
        <include name="smoke_valid_pset_13_test.yml" />
        <include name="smoke_valid_pset_14_test.yml" />
	</fileset>

    <target name="run-short-efc-tests" depends="package, checkout-short-nightly-tests">
        <pathconvert property="short.nightly.tests" refid="ShortExpressionFileCreatorTests" />
        <run-tests
            testcases="${short.nightly.tests}"
            numThreads="5"
            shutdownTimeout="${gpunit.shutdownTimeout}"
        />
    </target>

    <fileset id="ShortHierarchicalClusteringTests" dir="${gpunit.dir}/${module.tests.dir}/HierarchicalClustering/v6/gpunit" >
        <!-- HierarchicalClustering - v6 ColOriented -->
        <include name="col_oriented/valid_pset_1_test.yml" />
        <include name="col_oriented/valid_pset_2_test.yml" />
        <include name="col_oriented/valid_pset_3_test.yml" />
        <include name="col_oriented/valid_pset_4_test.yml" />
        <include name="col_oriented/valid_pset_5_test.yml" />
        <include name="col_oriented/valid_pset_6_test.yml" />
        <include name="col_oriented/valid_pset_7_test.yml" />
        <include name="col_oriented/valid_pset_8_test.yml" />
        <!-- HierarchicalClustering v6 - RowOriented -->
        <include name="row_oriented/valid_pset_1_test.yml" />
        <include name="row_oriented/valid_pset_2_test.yml" />
        <include name="row_oriented/valid_pset_3_test.yml" />
        <include name="row_oriented/valid_pset_4_test.yml" />
        <include name="row_oriented/valid_pset_5_test.yml" />
        <include name="row_oriented/valid_pset_6_test.yml" />
        <include name="row_oriented/valid_pset_7_test.yml" />
        <include name="row_oriented/valid_pset_8_test.yml" />
    </fileset>

    <target name="run-short-hc-tests" depends="package, checkout-short-nightly-tests">
        <pathconvert property="short.nightly.tests" refid="ShortHierarchicalClusteringTests" />
        <run-tests
            testcases="${short.nightly.tests}"
            numThreads="5"
            shutdownTimeout="${gpunit.shutdownTimeout}"
        />
    </target>

    <fileset id="ShortTopHatTests" dir="${gpunit.dir}/${module.tests.dir}/TopHat/v9/gpunit/" >
        <!-- TopHat v9 -->
        <include name="smoke_valid_pset_1_test.yml" />
        <include name="smoke_valid_pset_2_test.yml" />
        <include name="smoke_valid_pset_3_test.yml" />
        <include name="smoke_valid_pset_4_test.yml" />
        <include name="smoke_valid_pset_5_test.yml" />
        <include name="smoke_valid_pset_6_test.yml" />
        <include name="smoke_valid_pset_7_test.yml" />
        <include name="smoke_valid_pset_8_test.yml" />
        <include name="smoke_valid_pset_9_test.yml" />
        <include name="smoke_valid_pset_10_test.yml" />
        <include name="smoke_valid_pset_11_test.yml" />
        <include name="smoke_valid_pset_12_test.yml" />
        <include name="smoke_valid_pset_13_test.yml" />
        <include name="smoke_valid_pset_14_test.yml" />
        <include name="smoke_valid_pset_15_test.yml" />
    </fileset>

    <target name="run-short-tophat-tests" depends="package, checkout-short-nightly-tests">
        <pathconvert property="short.nightly.tests" refid="ShortTopHatTests" />
        <run-tests
            testcases="${short.nightly.tests}"
            numThreads="5"
            shutdownTimeout="${gpunit.shutdownTimeout}"
        />
    </target>

	<target name="run-short-nightly-tests" depends="package">
        <!-- The union task creates a fileset when given fileset resource references -->
        <union id="short.tests">
            <resources refid="ShortComparativeMarkerSelectionTests" />
            <resources refid="ShortExpressionFileCreatorTests" />
            <resources refid="ShortHierarchicalClusteringTests" />
            <resources refid="ShortTopHatTests" />
        </union>
        <!-- GpUnit assumes the fileset is delimited by the platform-dependent value returned -->
        <!-- by a call to File.pathSeparator, which returns ";" on Windows and ":" on Linux. -->
        <!-- However, ant creates the fileset with ";" as the separator on both platforms. -->
        <!-- Using the pathconvert task causes the delimiter to properly match the platform. -->
	    <pathconvert property="short.nightly.tests" refid="short.tests" />
        <run-tests
            testcases="${short.nightly.tests}"
            numThreads="5"
            shutdownTimeout="${gpunit.shutdownTimeout}"
        />
    </target>

    <target name="short-nightly-tests" depends="checkout-short-nightly-tests, run-short-nightly-tests" />

</project>
