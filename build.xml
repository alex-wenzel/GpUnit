<?xml version="1.0" encoding="UTF-8"?>
<project name="gp-unit" default="package">
    <dirname property="project.basedir" file="${ant.file.gp-unit}" />
    <property file="${project.basedir}/gpunit.default.properties" />
    <dirname property="gpunit.dir" file="${ant.file.gp-unit}" />
    <!-- 
      - Always load the 'gpunit.default.properties' file first, then
      - load the gpunit.properties file, which can optionally be
      - replaced with a different file, e.g.
      -      '-Dgpunit.properties=my.gpunit.properties'
      - NOTE: The GpUnit code in BatchProperties.java implements this
      - same behavior (loading gpunit.default.properties followed by
      - whatever other file is specified). Any change to the sequence
      - made here should be reflected there as well.
     -->
    <property name="gpunit.properties" value="gpunit.properties" />
    <property file="${gpunit.properties}" />

    <property name="gp.scheme" value="http" />
    <property name="gp.host" value="127.0.0.1" />
    <property name="gp.port" value="" />
    <property name="gp.path" value="/gp" />
    <property name="gp.user" value="test" />
    <property name="gp.password" value="test" />

    <property name="gp.url" value="${gp.scheme}://${gp.host}${gp.port}" />
    <property name="local.dir" location="${gpunit.dir}/tmp/${gp.host}" />
    <property name="client.lib.dir" location="${local.dir}/client" />
    <!-- if the client.dir already exists, skip the rest -->
    <available property="gp-client-lib-exists" file="${client.lib.dir}/GenePattern.jar" />
    <!-- location for downloading job results -->
    <property name="gpunit.outputdir" value="${local.dir}/jobResults" />
    <!-- location for generating junit reports -->
    <property name="report.dir" value="${user.dir}/reports" />

    <!-- optionally set junit jvm arg when testing an HTTPS server,
         -Djavax.net.ssl.trustStore=${gpunit.keystore} 
    -->    
    <property name="gpunit.keystore" value="" />
    
    <path id="gp.client.classpath">
        <pathelement location="${client.lib.dir}/GenePattern.jar" />
        <fileset dir="${client.lib.dir}/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="gpunit.classpath">
        <pathelement location="${gpunit.dir}/classes"/>
        <fileset dir="${gpunit.dir}/lib">
            <include name="**/*.jar"/>
        </fileset>
        <path refid="gp.client.classpath" />
    </path>

    <target name="init">
        <echo>initializing directories ... </echo>
        <echo>local.dir: ${local.dir} </echo>
        <echo>report.dir: ${report.dir} </echo>

        <tstamp />
        <mkdir dir="${gpunit.dir}/classes" />
        <mkdir dir="${gpunit.dir}/dist" />
        <mkdir dir="${client.lib.dir}" />
        <mkdir dir="${report.dir}" />
        
        <!-- initialize properties for a batch run -->
        <property name="gpunit.client" value="REST" />
        <property name="gpunit.batch.name" value="run_${DSTAMP}_${TSTAMP}" />
        <property name="gpunit.save.downloads" value="false" />
        <property name="gpunit.delete.jobs" value="false" />
        <property name="report.run.dir" location="${report.dir}/${gpunit.batch.name}" />
        <mkdir dir="${report.run.dir}" />
        <symlink link="${report.dir}/current" resource="${report.run.dir}" overwrite="true" failonerror="false" />
        <mkdir dir="${gpunit.outputdir}" />
        <symlink link="${gpunit.outputdir}/current" resource="${gpunit.batch.name}" overwrite="true" failonerror="false" />
        
        <property name="gpunit.upload.dir" value="" />
        <property name="gpunit.server.dir" value="" />
        
        <property name="gpunit.numThreads" value="" />
        <!-- timeout intervals in seconds, when set to the empty string, use default values built into GpUnit -->
        <property name="gpunit.shutdownTimeout" value="" /> <!-- Global timeout, exit junit after this timeout period. -->
        <property name="gpunit.jobCompletionTimeout" value="" /> <!-- Job poll timeout, stop polling for GP job completion after this timeout -->
        <property name="gpunit.testTimeout" value="" /> <!-- Junit test timeout, fail an indidivual junit test when this timeout is reached -->
    </target>

    <target name="check-url" unless="check-url.skip"
        description="check that the server is online, curl --head '${gp.url}' " >
        <check-url />
    </target>

    <!--
        This target verifies that the gpunit client can talk to the remove server; 
        Added as a way to test that the client is properly configured to connect to HTTPS servers.
        Hint: Set -Dgpunit.keystore when necessary.
    -->
    <target name="connection-test" depends="package, check-url"
        description="Run the 'org.genepattern.gpunit.test.ConnectionTest' junit test">
        <echo>Checking connection ... </echo>
        <run-tests testcases="connection-test" junit.test.name="org.genepattern.gpunit.test.ConnectionTest" />
    </target>

    <!-- in order to compile gp-unit, and to run gp-unit tests, must download the client library, 
         for SOAP client calls to the GP server -->
    <target name="gp-client-lib" depends="init" unless="gp-client-lib-exists"
        description="download the GenePattern Java Programming Library (SOAP client) from the server" >

        <!-- todo: would be nice to optionally call <check-url /> -->
        <get verbose="false" 
            src="${gp.url}${gp.path}/downloads/GenePattern.zip" 
            dest="${local.dir}/GenePattern.zip" usetimestamp="true" />
        <unzip src="${local.dir}/GenePattern.zip" dest="${client.lib.dir}" overwrite="true" />
    </target>

    <target name="compile" depends="init, gp-client-lib"
        description="compile GpUnit">
        <property name="java.target" value="1.6" /> 
        <javac debug="true" includeantruntime="false"
            defaultexcludes="true" 
            deprecation="true" 
            destdir="${gpunit.dir}/classes" 
            optimize="false" 
            proceed="false" 
            srcdir="${gpunit.dir}/src/main/java" 
            classpathref="gpunit.classpath" >
        </javac>
    </target>

    <target name="package" depends="compile"
        description="build and package GpUnit, creates the 'gp-unit.jar' file"
        >
        <jar basedir="${gpunit.dir}/classes" jarfile="${gpunit.dir}/dist/gp-unit.jar" />
    </target>

    <target name="clean-gpunit-dist" 
        description="clean the GpUnit binary distribution by deleting the class files and support libraries">
        <delete dir="${gpunit.dir}/classes" />
        <delete dir="${gpunit.dir}/dist" />
    </target>
    
    <target name="clean-test-run" depends="clean-gpunit-outputdir, clean-report-dir"
        description="calls 'clean-gpunit-outputdir' and 'clean-report-dir'"
    >
    </target>

    <target name="clean-gpunit-outputdir"
        description="clean the ${gpunit.outputdir}, which includes all downloaded job results"
    >
        <delete dir="${gpunit.outputdir}" />
        <delete file="System.out" />
    </target>

    <target name="clean-report-dir"
        description="clean the ${report.dir} and the ${gpunit.outputdir}"
    >
        <delete dir="${report.dir}" />
    </target>

    <target name="clean" depends="clean-test-run, clean-gpunit-dist"
        description="cleans all output files, including the binary distribution"
    >
        <!-- Clean up the repositories created by imported buildsuites.xml -->
        <antcall target="clean-test-repos" />
    </target>
    <!-- END build gp-unit.jar -->

    <!--
        Check to see if the server is online.
    -->
    <macrodef name="check-url">
        <sequential>
            <!-- use curl command to check status -->
            <!-- curl \-\-head \-\-silent \-\-fail \-\-show-error http://127.0.0.1:8080/gp/pages/login.xhtml -->
            <exec executable="curl"
                failifexecutionfails="false"
                failonerror="true"
                outputproperty="exec.out"
                logError="true"
            >
              <arg value="--insecure" /> <!-- aka '-k', perform insecure SSL connections -->
              <arg value="--head" />
              <arg value="--silent" />
              <arg value="--fail" />
              <arg value="--show-error" />
              <arg value="${gp.url}${gp.path}/pages/login.xhtml" />
            </exec>
        </sequential>
    </macrodef>

    <!-- run a batch of gp-unit tests via SOAP client requests 
         use a single parameterized jUnit test to submit the jobs and validate the results.
         
         To run the tests, create a path, give it a refid, then create a property from that refid.
         Look at the gpunit-all-protocols target for an example. 
      -->
    <macrodef name="run-tests">
        <attribute name="junit.test.name" default="org.genepattern.gpunit.test.BatchModuleTest" />
        <attribute name="testcases" />
        <attribute name="numThreads" default="${gpunit.numThreads}" />
        <!-- when running jobs in parallel, this is the max time in seconds to wait before finishing the test -->
        <attribute name="shutdownTimeout" default="${gpunit.shutdownTimeout}" /> 
        <attribute name="junit.formatter" default="xml" /> <!-- 'brief' | 'xml' | 'html' -->
        <attribute name="showoutput" default="true" />
        <attribute name="usefile" default="true" />
        <sequential>
            <echo>Running tests as '${gp.user}' on '${gp.url}'</echo>
            <echo>testcases: @{testcases}</echo>
            <echo>junit.formatter: @{junit.formatter}</echo>

            <property name="gpunit.classpath.prop" refid="gpunit.classpath" /> 

            <junit fork="yes" printsummary="on" haltonfailure="false" showoutput="@{showoutput}" logfailedtests="true" failureProperty="test.failure" >
                <formatter type="@{junit.formatter}" usefile="@{usefile}" />
                <test name="@{junit.test.name}" outfile="TEST-all" todir="${report.run.dir}"/>
                <classpath refid="gpunit.classpath" />
                <sysproperty key="gpunit.testcase.dirs" value="@{testcases}" />

                <sysproperty key="genePatternUrl" value="${gp.url}" />
                <sysproperty key="username" value="${gp.user}" />
                <sysproperty key="password" value="${gp.password}" />
                
                <sysproperty key="gpunit.client" value="${gpunit.client}" />
                <sysproperty key="gpunit.outputdir" value="${gpunit.outputdir}" />
                <sysproperty key="gpunit.batch.name" value="${gpunit.batch.name}" />
                <sysproperty key="gpunit.save.downloads" value="${gpunit.save.downloads}" />
                <sysproperty key="gpunit.delete.jobs" value="${gpunit.delete.jobs}" />
                
                <sysproperty key="gpunit.upload.dir" value="${gpunit.upload.dir}" />
                <sysproperty key="gpunit.server.dir" value="${gpunit.server.dir}" />
                
                <sysproperty key="gpunit.numThreads" value="@{numThreads}" />
                <sysproperty key="gpunit.shutdownTimeout" value="@{shutdownTimeout}" />
                <sysproperty key="gpunit.testTimeout" value="${gpunit.testTimeout}" />
                <sysproperty key="gpunit.jobCompletionTimeout" value="${gpunit.jobCompletionTimeout}" />
                <sysproperty key="gpunit.properties" value="${gpunit.properties}" />
                <!-- GpUnit uses project.basedir to find gpunit.default.properties -->
                <sysproperty key="project.basedir" value="${project.basedir}" />
                <syspropertyset>
                    <propertyref builtin="commandline"/>
                </syspropertyset>
                
                <jvmarg value="-Djavax.net.ssl.trustStore=${gpunit.keystore}" />
            </junit>

            <junitreport todir="${report.run.dir}">
                <fileset dir="${report.run.dir}">
                    <include name="TEST-*.xml"/>
                </fileset>
                <report format="frames" todir="${report.run.dir}/html"/>
            </junitreport>

            <fail if="test.failure" message="junit test failed" />
        </sequential> 
    </macrodef>
    
    <target name="gpunit-all-protocols" depends="package"
        description="Run all GpUnit tests in the './tests/protocols' folder" >
        <path id="all-protocols.path">
            <pathelement location="./tests/protocols" />
        </path>
        <property name="all-protocols.testcases" refid="all-protocols.path" /> 
        <!-- the max amount of time to wait, in seconds, before terminating the unit test -->
        <run-tests 
            testcases="${all-protocols.testcases}" 
            numThreads="5" 
            shutdownTimeout="${gpunit.shutdownTimeout}"
        />
    </target>

    <target name="gpunit-all-saved-jobs" depends="package"
        description="Run all GpUnit tests in the './tests/saved_jobs' folder" >
        <path id="saved-jobs.path">
            <pathelement location="./tests/saved_jobs" />
        </path>
        <property name="saved-jobs.testcases" refid="saved-jobs.path" /> 
        <run-tests testcases="${saved-jobs.testcases}" />
    </target>

    <target name="gpunit" depends="package, connection-test"
        description="Run all GpUnit tests in the '${gpunit.testfolder}' (default=./tests)"
        >
        <property name="gpunit.testfolder" location="./tests" />
        <path id="testfolder.path">
            <pathelement location="${gpunit.testfolder}" />
        </path>
        <property name="testcases" refid="testfolder.path" /> 
        <run-tests testcases="${testcases}"
            numThreads="${gpunit.numThreads}" 
            shutdownTimeout="${gpunit.shutdownTimeout}" />
    </target>
    
    <target name="compile-automatrix" depends="package"
        description="compile automatrix, see ./automatrix/build.xml"
        >
        <!-- For the interim, just copy the locally built gp-unit.jar over the archived one in the automatrix -->
        <!-- lib dir, and then try to compile automatrix. -->
        <copy file="${gpunit.dir}/dist/gp-unit.jar" todir="./automatrix/website/WEB-INF/lib" />
        <ant antfile="automatrix/build.xml" target="createWar" useNativeBasedir="true" />
    </target>

    <target name="gpunit-junit-tests" depends="init, package"
        description="run junit test of the GpUnit source code">
        <property name="junit.results.dir" location="./junit" />
        <mkdir dir="${junit.results.dir}" />
        <junit showoutput="true" printsummary="true" >
            <classpath>
                <pathelement location="${gpunit.dir}/classes"/>
                <fileset dir="${gpunit.dir}/src/test/lib" >
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="./lib">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement location="${client.lib.dir}/GenePattern.jar" />
            </classpath>
            <test name="org.genepattern.gpunit.yaml.PropertyExpansionTests" outfile="gpunit-junit" todir="${junit.results.dir}" >
                <formatter type="xml"/>
            </test>
        </junit>
    </target>

    <!-- Import module test suite targets and fileset definitions -->
	<import file="buildsuites.xml" />

</project>
