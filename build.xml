<?xml version="1.0" encoding="UTF-8"?>
<project name="gp-unit" basedir="." default="package"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless"
    xmlns:artifact="antlib:org.apache.maven.artifact.ant"
>
    <dirname property="project.basedir" file="${ant.file.gp-unit}" />
    <property file="${project.basedir}/gpunit.default.properties" />
    <dirname property="gpunit.dir" file="${ant.file.gp-unit}" />
    <!-- 
      - Always load the 'gpunit.default.properties' file first, then
      - load the gpunit.properties file, which can optionally be
      - replaced with a different file, e.g.
      -      '-Dgpunit.properties=my.gpunit.properties'
      - NOTE: The GpUnit code in BatchProperties.java implements this
      - same behavior (loading gpunit.default.properties followed by
      - whatever other file is specified). Any change to the sequence
      - made here should be reflected there as well.
     -->
    <property name="gpunit.properties" value="gpunit.properties" />
    <property file="${gpunit.properties}" />

    <property name="gp.scheme" value="http" />
    <property name="gp.host" value="127.0.0.1" />
    <property name="gp.port" value="" />
    <property name="gp.path" value="/gp" />
    <property name="gp.user" value="test" />
    <property name="gp.password" value="test" />

    <property name="gp.url" value="${gp.scheme}://${gp.host}${gp.port}" />
    <property name="local.dir" location="${gpunit.dir}/tmp/${gp.host}" />
    <property name="client.lib.dir" location="${local.dir}/client" />
    <!-- if the client.dir already exists, skip the rest -->
    <available property="gp-client-lib-exists" file="${client.lib.dir}/GenePattern.jar" />
    <!-- location for downloading job results -->
    <property name="gpunit.outputdir" value="${local.dir}/jobResults" />
    <!-- location for generating junit reports -->
    <property name="report.dir" value="${user.dir}/reports" />

    <!-- optionally set junit jvm arg when testing an HTTPS server,
         -Djavax.net.ssl.trustStore=${gpunit.trustStore} 
         -Djavax.net.ssl.trustStorePassword=${gpunit.trustStorePassword}
    -->    
    <property name="gpunit.trustStore" value="" />
    <property name="gpunit.trustStorePassword" value="" />
    
    <path id="gp.client.classpath">
        <pathelement location="${client.lib.dir}/GenePattern.jar" />
        <fileset dir="${client.lib.dir}/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="gpunit.classpath">
        <pathelement location="${gpunit.dir}/classes"/>
        <fileset dir="${gpunit.dir}/lib">
            <include name="**/*.jar"/>
        </fileset>
        <path refid="gp.client.classpath" />
    </path>

    <!--
      Set 'verbose' flag as an ant target
      Usage:
        ant verbose target[s] ...
      This is equivalent to 
        ant -Dverbose=true target[s] ...
      
      Note: this target is unnecessary when running ant in debug or verbose mode
        ant -debug, -d ...
        ant -verbose, -v ...
    -->
    <target name="verbose"
      description="set 'verbose' flag; ant verbose ...">
        <property name="verbose" value="true" />
    </target>

    <!-- 
      Enable verbose output
          ant -Dverbose=true ...
      As a convenience, also set to true, based on ant command line flags
          ant -v (-verbose) ...
          ant -d (-debug) ...

      Note: Use the 'echoproperties' task for extended debugging, e.g.
          <echoproperties destfile="echoproperties.out" />
      Note: To print the current command line
          <echo message="${sun.java.command}" />
    -->
    <target name="init-verbose">
        <condition property="verbose">
            <or>
                <istrue value="${verbose}" />
                <contains string="${sun.java.command}" substring=" -v " />
                <contains string="${sun.java.command}" substring=" -verbose " />
                <contains string="${sun.java.command}" substring=" -d " />
                <contains string="${sun.java.command}" substring=" -debug " />
            </or>
        </condition>
        <echo if:true="${verbose}" message="verbose='${verbose}'" />
    </target>

    <!--
      Apache Commons Logging configuration for HttpClient
        see: https://hc.apache.org/httpcomponents-client-ga/logging.html
    -->
    <target name="init-logging">
        <!-- Note: change 'ERROR' to 'DEBUG' for more detailed output -->
        <property name="org.apache.commons.logging.Log" value="org.apache.commons.logging.impl.SimpleLog" />
        <property name="org.apache.commons.logging.simplelog.showdatetime" value="true" />
        <property name="org.apache.commons.logging.simplelog.log.org.apache.http" value="ERROR" />
        <property name="org.apache.commons.logging.simplelog.log.org.apache.http.wire" value="ERROR" />
        <propertyset id="org.apache.commons.props">
            <propertyref prefix="org.apache.commons" />
        </propertyset>
    </target>

    <target name="init" depends="init-verbose, init-logging">
        <echo>initializing directories ... </echo>
        <echo>local.dir: ${local.dir} </echo>
        <echo>report.dir: ${report.dir} </echo>

        <tstamp />
        <mkdir dir="${gpunit.dir}/classes" />
        <mkdir dir="${gpunit.dir}/dist" />
        <mkdir dir="${client.lib.dir}" />
        <mkdir dir="${report.dir}" />
        
        <!-- initialize properties for a batch run -->
        <property name="gpunit.client" value="REST" />
        <property name="gpunit.batch.name" value="run_${DSTAMP}_${TSTAMP}" />
        <property name="gpunit.save.downloads" value="false" />
        <property name="gpunit.delete.jobs" value="false" />
        <property name="report.run.dir" location="${report.dir}/${gpunit.batch.name}" />
        <mkdir dir="${report.run.dir}" />
        <symlink link="${report.dir}/current" resource="${report.run.dir}" overwrite="true" failonerror="false" />
        <mkdir dir="${gpunit.outputdir}" />
        <symlink link="${gpunit.outputdir}/current" resource="${gpunit.batch.name}" overwrite="true" failonerror="false" />
        
        <property name="gpunit.upload.dir" value="" />
        <property name="gpunit.server.dir" value="" />
        
        <property name="gpunit.numThreads" value="" />
        <!-- timeout intervals in seconds, when set to the empty string, use default values built into GpUnit -->
        <property name="gpunit.shutdownTimeout" value="" /> <!-- Global timeout, exit junit after this timeout period. -->
        <property name="gpunit.jobCompletionTimeout" value="" /> <!-- Job poll timeout, stop polling for GP job completion after this timeout -->
        <property name="gpunit.testTimeout" value="" /> <!-- Junit test timeout, fail an indidivual junit test when this timeout is reached -->
        
        <has-value pname="gpunit.trustStore" />
        <has-value pname="gpunit.trustStorePassword" />
    </target>

    <target name="help" depends="init"
        description="init and print gpunit.properties"
    >
        <!-- retrieve environment variables -->
        <property environment="env" />

        
        <echo-value pname="env.ANT_HOME" />
        <echo-value pname="ant.version" />
        
        <echo-value pname="env.GPUNIT_HOME" />
        <echo-value pname="gpunit.dir" />
        <echo-value pname="basedir" />
        <echo-value pname="project.basedir" />
        <echo-value pname="user.dir" />
        <echo></echo>
        <echo-value pname="gpunit.properties" />
        
        <echo-value pname="client.lib.dir" />
        <echo></echo>
        <echo-value pname="connection-test.skip" />
        <echo-value pname="check-url.skip" />
        <echo-value pname="gpunit.numThreads" />
        <echo-value pname="gpunit.jobCompletionTimeout" />
        <echo-value pname="gpunit.testTimeout" />
        <echo-value pname="gpunit.shutdownTimeout" />
        <echo></echo>
        <echo-value pname="gpunit.outputdir" />
        <echo-value pname="gpunit.save.downloads" />
        <echo-value pname="gpunit.delete.jobs" />
        <echo></echo>
        <echo-value pname="report.dir" />
        <echo-value pname="gpunit.batch.name" />
        <echo-value pname="report.run.dir" />
        <echo></echo>
        <echo-value pname="gpunit.localAssertions" />
        <echo-value pname="gpunit.upload.dir" />
        <echo-value pname="gpunit.server.dir" />
        <!-- Data set locations -->
        <echo-value pname="gpunit.testData" />
        <echo-value pname="gpunit.gpData" />
        <echo-value pname="gpunit.diffStripTrailingCR" />
        <echo></echo>
        <echo-value pname="gp.url" />
        <echo-value pname="gp.path" />
        <echo-value pname="gp.user" />
        <!-- echo-value pname="gp.password" / -->
        <echo-value pname="gpunit.client" />
        <echo-value pname="gpunit.testfolder" />
    </target>

    <!-- 
      Macrodef: has-value, to check for empty values
      Usage:
        <has-value pname="my-param" />
        <echo if:set="my_param.has_value">my_param is set to: ${my_param}</echo>
      Sets @{pname}.has_value to "true" if the parameter is set to a non-empty value.
      This is a workaround for incorrect (imho) implementation of if:blank and unless:blank
    -->
    <macrodef name="has-value">
        <attribute name="pname" />
        <attribute name="suffix" default=".has_value" />
        <sequential>
            <property name="@{pname}@{suffix}" value="true" if:set="@{pname}" unless:blank="${@{pname}}" />
        </sequential>
    </macrodef>

    <!--
      Macrodef: echo-value, print the value of the given property, 
        with special handling for unset, empty and boolean values.
        This is split into two macrodefs to enable verbose output.
      Usage:
        <echo-value pname="my-param" />
    -->
    <macrodef name="echo-value">
        <attribute name="pname" />
        <attribute name="suffix" default=".has_value" />
        <sequential>
            <has-value pname="@{pname}" suffix="@{suffix}" />
            <echo-value-succint pname="@{pname}" />
            <echo-value-verbose if:set="verbose" pname="@{pname}" suffix="@{suffix}" />
        </sequential>
    </macrodef>

    <!-- don't call this directly, it is called from the 'echo-value' macrodef -->
    <macrodef name="echo-value-succint">
        <attribute name="pname" />
        <sequential>
            <echo if:set="@{pname}">@{pname}='${@{pname}}'</echo>
            <echo unless:set="@{pname}">@{pname}=(not set)</echo>
        </sequential>
    </macrodef>

    <!-- 
      don't call this directly, it is called from the 'echo-value' macrodef
      when in verbose mode
      -->
    <macrodef name="echo-value-verbose">
        <attribute name="pname" />
        <attribute name="suffix" default=".has_value" />
        <sequential>
            <echo       if:set="@{pname}"    >    if:set="@{pname}"</echo>
            <echo   unless:set="@{pname}"    >    unless:set="@{pname}"</echo>
            <echo      if:true="${@{pname}}" >    if:true="$${@{pname}}"</echo>
            <echo  unless:true="${@{pname}}" >    unless:true="$${@{pname}}"</echo>
            <echo     if:blank="${@{pname}}" >    if:blank="$${@{pname}}"</echo>
            <echo unless:blank="${@{pname}}" >    unless:blank="$${@{pname}}"</echo>
            <!-- for illustration only, incorrect use of if:blank ... 
            <echo     if:blank="@{pname}"    >    if:blank="@{pname}"</echo>
            <echo unless:blank="@{pname}"    >    unless:blank="@{pname}"</echo>
            -->
            
            <!-- recommended, if:set="gpunit.trustStore.has_value" ... -->
            <echo>    is '@{pname}' set ...</echo>
            <!-- echo>    recommended ...</echo -->
            <echo       if:set="@{pname}@{suffix}"    >        (recommended) if:set="@{pname}@{suffix}"</echo>
            <echo   unless:set="@{pname}@{suffix}"    >        (recommended) unless:set="@{pname}@{suffix}"</echo>
            <!-- alternative 1, if:true"${gpunit.trustStore.has_value}" ... -->
            <!-- echo>    alternative 1 ...</echo -->
            <echo      if:true="${@{pname}@{suffix}}" >              (alt 1) if:true="$${@{pname}@{suffix}}"</echo>
            <echo  unless:true="${@{pname}@{suffix}}" >              (alt 1) unless:true="$${@{pname}@{suffix}}"</echo>
            <!-- alternative 2, does not require 'has-value' macrodef
                 if:set="gpunit.trustStore" unless:blank="${gpunit.trustStore}" ...  -->
            <!-- echo>    alternative 2 ... </echo -->
            <echo if:set="@{pname}" unless:blank="${@{pname}}">              (alt 2) if:set="@{pname}" unless:blank="$${@{pname}}"</echo>
        </sequential>
    </macrodef>

    <!--                                                                                                                                                               
      Test 'gpunit.trustStore' and 'gpunit.trustStorePassword' flags
      Usage: 
        ant -Dgpunit.trustStore=A debug-trustStore-flags
        ant -Dgpunit.trustStorePassword=B debug-trustStore-flags
    -->
    <target name="debug-trustStore-flags" depends="init"
        description="for debugging 'gpunit.trustStore' and 'gpunit.trustStorePassword' flags"
    >
        <!-- check if the verbose flag is set -->
        <condition property="verbose">
            <or>
                <contains string="${sun.java.command}" substring=" -v " />
                <contains string="${sun.java.command}" substring=" -verbose " />
            </or>
        </condition>
        <echo>verbose: ${verbose}</echo>

        <echo-value pname="gpunit.trustStore" />
        <echo if:set="gpunit.trustStore.has_value">    jvmarg: -Djavax.net.ssl.trustStore=${gpunit.trustStore}</echo>
        <echo unless:set="gpunit.trustStore.has_value">    jvmarg not set: -Djavax.net.ssl.trustStore</echo>
        <echo-value pname="gpunit.trustStorePassword" />
        <echo if:set="gpunit.trustStorePassword.has_value">    jvmarg: -Djavax.net.ssl.trustStorePassword=${gpunit.trustStorePassword}</echo>
        <echo unless:set="gpunit.trustStorePassword.has_value">    jvmarg not set: -Djavax.net.ssl.trustStorePassword</echo> 
    </target>

    <!--
        This target verifies that the gpunit client can talk to the remove server; 
        Added as a way to test that the client is properly configured to connect to HTTPS servers.
        Hint: Set -Dgpunit.trustStore when necessary.
    -->
    <target name="connection-test" depends="package, check-url" unless="connection-test.skip"
        description="Run the 'org.genepattern.gpunit.test.ConnectionTest' junit test">
        <echo>Checking connection ... </echo>
        <run-tests testcases="connection-test" junit.test.name="org.genepattern.gpunit.test.ConnectionTest" />
    </target>

    <target name="check-url" depends="init-verbose" unless="check-url.skip"
        description="check that the server is online, curl --head '${gp.url}' " >
        <check-url />
    </target>

    <!-- the (convoluted) ant way to optionally call <check-url /> before downloading the client library -->
    <condition property="gp-client-lib-check-url.skip">
        <or>
            <isTrue value="${gp-client-lib-exists}" />
            <isTrue value="${check-url.skip}" />
        </or>
    </condition>
    <target name="gp-client-lib-check-url" unless="gp-client-lib-check-url.skip">
        <check-url />
    </target>

    <!-- the gp-client-lib is needed to compile GpUnit -->
    <target name="gp-client-lib" depends="init, gp-client-lib-check-url" unless="gp-client-lib-exists"
        description="download the GenePattern Java Programming Library (SOAP client) from the server" >

        <get verbose="false" 
            src="${gp.url}${gp.path}/downloads/GenePattern.zip" 
            dest="${local.dir}/GenePattern.zip" usetimestamp="true" />
        <unzip src="${local.dir}/GenePattern.zip" dest="${client.lib.dir}" overwrite="true" />
    </target>

    <!-- location for maven dependencies copied into this project -->
    <property name="dependency.dir" location="${gpunit.dir}/target/dependency" />
    <target name="download-deps" depends="init"
        description="install maven dependencies"
    >
        <!--  
          Maven Ant Tasks > Dependencies 
            See: http://maven.apache.org/ant-tasks/reference.html#dependencies
            See: http://maven.apache.org/ant-tasks/examples/dependencies.html

          Note: must set custom 'dependencyRefsBuildFile'
            default: ./target/build-dependencies.xml
        -->
        <path id="maven-ant-tasks.classpath" path="${gpunit.dir}/lib/maven-ant-tasks-2.1.3.jar" />
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
            uri="antlib:org.apache.maven.artifact.ant"
            classpathref="maven-ant-tasks.classpath" />

        <artifact:dependencies pathId="dependencies.classpath" 
            filesetId="dependency.fileset"
            sourcesFilesetId="sources.dependency.fileset"
            javadocFilesetId="javadoc.dependency.fileset"
            versionsId="dependency.versions"
            cacheDependencyRefs="true"
            dependencyRefsBuildFile="${gpunit.dir}/target/build-dependencies.xml"
        >

            <dependency groupId="commons-codec" artifactId="commons-codec" version="1.3" />
            <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-compress -->
            <dependency groupId="org.apache.commons" artifactId="commons-compress" version="1.8" />
            <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
            <dependency groupId="com.google.code.gson" artifactId="gson" version="2.3.1" />
            <!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest-core -->
            <dependency groupId="org.hamcrest" artifactId="hamcrest-core" version="1.3" />
            <!-- https://mvnrepository.com/artifact/junit/junit -->
            <dependency groupId="junit" artifactId="junit" version="4.11" />
            <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->
            <dependency groupId="org.apache.httpcomponents" artifactId="httpclient" version="4.5.3" />
            <!-- https://mvnrepository.com/artifact/org.yaml/snakeyaml -->
            <dependency groupId="org.yaml" artifactId="snakeyaml" version="1.10" />
            <!-- https://mvnrepository.com/artifact/log4j/log4j -->
            <dependency groupId="log4j" artifactId="log4j" version="1.2.17" />
            
            <!-- https://mvnrepository.com/artifact/org.mockito/mockito-core -->
            <dependency groupId="org.mockito" artifactId="mockito-core" version="1.9.5" scope="test" />
            <!-- https://mvnrepository.com/artifact/org.objenesis/objenesis -->
            <dependency groupId="org.objenesis" artifactId="objenesis" version="1.0" scope="test" />
            <!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest-core -->
            <dependency groupId="org.hamcrest" artifactId="hamcrest-core" version="1.3" scope="test" />
        </artifact:dependencies>

        <path id="gpunit.classpath">
            <pathelement location="${gpunit.dir}/classes" />
            <pathelement location="${gpunit.dir}/lib/gp-modules-updated.jar" />
            <path refid="gp.client.classpath" />
            <path refid="dependencies.classpath" />
        </path>

        <copy todir="${dependency.dir}">
            <fileset refid="dependency.fileset" />
            <!-- This mapper strips off all leading directory information -->
            <mapper type="flatten" />
        </copy>

        <copy todir="${dependency.dir}/src">
            <fileset refid="sources.dependency.fileset" />
            <mapper classpathref="maven-ant-tasks.classpath"
                  classname="org.apache.maven.artifact.ant.VersionMapper"
                  from="${dependency.versions}" to="flatten" />
        </copy>

        <copy todir="${dependency.dir}/javadoc">
            <fileset refid="javadoc.dependency.fileset" />
            <mapper classpathref="maven-ant-tasks.classpath"
                  classname="org.apache.maven.artifact.ant.VersionMapper"
                  from="${dependency.versions}" to="flatten" />
        </copy>
    </target>

    <target name="compile" depends="init, gp-client-lib, download-deps"
        description="compile GpUnit">
        <property name="java.target" value="1.6" /> 
        <javac debug="true" includeantruntime="false"
            defaultexcludes="true" 
            deprecation="true" 
            destdir="${gpunit.dir}/classes" 
            optimize="false" 
            proceed="false" 
            srcdir="${gpunit.dir}/src/main/java" 
            classpathref="gpunit.classpath" >
        </javac>
    </target>

    <target name="package" depends="compile"
        description="build and package GpUnit, creates the 'gp-unit.jar' file"
        >
        <jar basedir="${gpunit.dir}/classes" jarfile="${gpunit.dir}/dist/gp-unit.jar" />
    </target>

    <target name="clean-deps"
        description="clean the 3rd party dependencies downloaded from the maven repository"
    >
        <delete dir="${dependency.dir}" />
    </target>
        
    <target name="clean-gpunit-dist" 
        description="clean the GpUnit binary distribution by deleting the class files and support libraries">
        <delete dir="${gpunit.dir}/classes" />
        <delete dir="${gpunit.dir}/dist" />
        <delete dir="${gpunit.dir}/target" />
    </target>
    
    <target name="clean-test-run" depends="clean-gpunit-outputdir, clean-report-dir"
        description="calls 'clean-gpunit-outputdir' and 'clean-report-dir'"
    >
    </target>

    <target name="clean-gpunit-outputdir"
        description="clean the ${gpunit.outputdir}, which includes all downloaded job results"
    >
        <delete dir="${gpunit.outputdir}" />
        <delete file="System.out" />
    </target>

    <target name="clean-report-dir"
        description="clean the ${report.dir} and the ${gpunit.outputdir}"
    >
        <delete dir="${report.dir}" />
    </target>

    <target name="clean" depends="clean-test-run, clean-gpunit-dist"
        description="cleans all output files, including the binary distribution"
    >
        <!-- Clean up the repositories created by imported buildsuites.xml -->
        <antcall target="clean-test-repos" />
    </target>
    <!-- END build gp-unit.jar -->

    <!--
      'curl' command line wrapper
      Usage:
        <curl url="${my-url}" />         
        <curl head="true" url="${my-url}" />
      As an alternative, pass all command line args via the 'extra-args' property ... 
          <curl extra-args="-I -s -f -S" url="${my-url}" />
          ant -Dcheck-url.extra-args="-I -s -f -S" ...
    -->
    <macrodef name="curl">
      <attribute name="url" />

      <!-- curl command line options, set these properties to "true" to enable each option -->
      <attribute name="head" default="false"
        description="-I, --head command line option" />
      <attribute name="insecure" default="false" 
        description="-k, --insecure, insecure SSL connections" />
      <attribute name="silent" default="true" 
        description="-s, --silent, don't show progress meter or error messages" />
      <attribute name="fail" default="true" 
        description="-f, --fail, fail silently on server errors and return error 22" />
      <attribute name="show-error" default="true" 
        description="-S, --show-error" />
        
      <!-- extra command line args -->
      <attribute name="extra-args" default="" />
        
      <sequential>
        <exec executable="curl"
          failifexecutionfails="false"
          failonerror="true"
          outputproperty="exec.out"
          logError="true"
        >
          <arg value="--insecure"    if:true="@{insecure}" /> 
          <arg value="--head"        if:true="@{head}" />
          <arg value="--silent"      if:true="@{silent}" />
          <arg value="--fail"        if:true="@{fail}" />
          <arg value="--show-error"  if:true="@{show-error}" />
          <arg line="@{extra-args}" unless:blank="@{extra-args}" />
          <arg value="@{url}" />
        </exec>
        </sequential>
    </macrodef>

    <!--
        Check to see if the server is online.
    -->
    <property name="check-url.head"       value="true" />
    <property name="check-url.insecure"   value="false" />
    <property name="check-url.silent"     value="true" />
    <property name="check-url.fail"       value="true" />
    <property name="check-url.show-error" value="true" />
    <property name="check-url.extra-args" value="" />
    <macrodef name="check-url">
        <attribute name="url" default="${gp.url}${gp.path}/pages/login.xhtml" />

        <attribute name="head" default="true"
            description="when true, append the '--head' flag to the curl command" />
        <attribute name="insecure" default="${check-url.insecure}" 
            description="when true, append the '--insecure' flag to the curl command" />
        <attribute name="silent" default="${check-url.silent}" />
        <attribute name="fail" default="${check-url.fail}" />
        <attribute name="show-error" default="${check-url.show-error}" />
        <sequential>
            <!-- use curl command to check status -->
            <!-- curl -I http://127.0.0.1:8080/gp/pages/login.xhtml -->
            <echo if:true="${verbose}" message="checking status, url=@{url}" />
            <curl head="${check-url.head}" 
                insecure="${check-url.insecure}" 
                silent="${check-url.silent}" 
                fail="${check-url.fail}" 
                show-error="${check-url.show-error}" 
                extra-args="${check-url.extra-args}"
                url="@{url}" 
            />
        </sequential>
    </macrodef>

    <!-- run a batch of gp-unit tests via SOAP client requests 
         use a single parameterized jUnit test to submit the jobs and validate the results.
         
         To run the tests, create a path, give it a refid, then create a property from that refid.
         Look at the gpunit-all-protocols target for an example. 
      -->
    <macrodef name="run-tests">
        <attribute name="junit.test.name" default="org.genepattern.gpunit.test.BatchModuleTest" />
        <attribute name="testcases" />
        <attribute name="numThreads" default="${gpunit.numThreads}" />
        <!-- when running jobs in parallel, this is the max time in seconds to wait before finishing the test -->
        <attribute name="shutdownTimeout" default="${gpunit.shutdownTimeout}" /> 
        <attribute name="junit.formatter" default="xml" /> <!-- 'brief' | 'xml' | 'html' -->
        <attribute name="showoutput" default="true" />
        <attribute name="usefile" default="true" />
        <sequential>
            <echo>Running tests as '${gp.user}' on '${gp.url}'</echo>
            <echo>testcases: @{testcases}</echo>
            <echo>junit.formatter: @{junit.formatter}</echo>

            <property name="gpunit.classpath.prop" refid="gpunit.classpath" /> 

            <junit fork="yes" printsummary="on" haltonfailure="false" showoutput="@{showoutput}" logfailedtests="true" failureProperty="test.failure" >
                <formatter type="@{junit.formatter}" usefile="@{usefile}" />
                <test name="@{junit.test.name}" outfile="TEST-all" todir="${report.run.dir}"/>
                <classpath refid="gpunit.classpath" />
                <sysproperty key="gpunit.testcase.dirs" value="@{testcases}" />

                <sysproperty key="gp.url" value="${gp.url}" />
                <sysproperty key="gp.user" value="${gp.user}" />
                <sysproperty key="gp.password" value="${gp.password}" />

                <sysproperty key="gpunit.client" value="${gpunit.client}" />
                <sysproperty key="gpunit.outputdir" value="${gpunit.outputdir}" />
                <sysproperty key="gpunit.batch.name" value="${gpunit.batch.name}" />
                <sysproperty key="gpunit.save.downloads" value="${gpunit.save.downloads}" />
                <sysproperty key="gpunit.delete.jobs" value="${gpunit.delete.jobs}" />
                
                <sysproperty key="gpunit.upload.dir" value="${gpunit.upload.dir}" />
                <sysproperty key="gpunit.server.dir" value="${gpunit.server.dir}" />
                
                <sysproperty key="gpunit.numThreads" value="@{numThreads}" />
                <sysproperty key="gpunit.shutdownTimeout" value="@{shutdownTimeout}" />
                <sysproperty key="gpunit.testTimeout" value="${gpunit.testTimeout}" />
                <sysproperty key="gpunit.jobCompletionTimeout" value="${gpunit.jobCompletionTimeout}" />
                <sysproperty key="gpunit.properties" value="${gpunit.properties}" />
                <!-- GpUnit uses project.basedir to find gpunit.default.properties -->
                <sysproperty key="project.basedir" value="${project.basedir}" />
                <syspropertyset>
                    <propertyref builtin="commandline"/>
                </syspropertyset>

                <syspropertyset refid="org.apache.commons.props" />

                <jvmarg if:set="gpunit.trustStore.has_value" 
                    value="-Djavax.net.ssl.trustStore=${gpunit.trustStore}" />
                <jvmarg if:set="gpunit.trustStorePassword.has_value" 
                    value="-Djavax.net.ssl.trustStorePassword=${gpunit.trustStorePassword}" />
            </junit>

            <junitreport todir="${report.run.dir}">
                <fileset dir="${report.run.dir}">
                    <include name="TEST-*.xml"/>
                </fileset>
                <report format="frames" todir="${report.run.dir}/html"/>
            </junitreport>

            <fail if="test.failure" message="junit test failed" />
        </sequential> 
    </macrodef>
    
    <target name="gpunit-all-protocols" depends="package"
        description="Run all GpUnit tests in the '${gpunit.dir}/tests/protocols' folder" 
    >
        <property name="protocols.dir" location="${gpunit.dir}/tests/protocols" />
        <run-tests 
            testcases="${protocols.dir}" 
            numThreads="5" 
        />
    </target>

    <target name="gpunit-all-saved-jobs" depends="package"
        description="Run all GpUnit tests in the '${gpunit.dir}/tests/saved_jobs' folder" 
    >
        <property name="saved-jobs.dir" location="{gpunit.dir}/tests/saved_jobs" />
        <run-tests testcases="${saved-jobs.dir}" />
    </target>

    <target name="gpunit" depends="package, connection-test"
        description="Run all GpUnit tests in the '${gpunit.testfolder}' (default=./tests)"
    >
        <property name="gpunit.testfolder" location="./tests" />
        <path id="testfolder.path">
            <pathelement location="${gpunit.testfolder}" />
        </path>
        <property name="testcases" refid="testfolder.path" /> 
        <run-tests testcases="${testcases}" />
    </target>
    
    <target name="compile-automatrix" depends="package"
        description="compile automatrix, see ./automatrix/build.xml"
        >
        <!-- For the interim, just copy the locally built gp-unit.jar over the archived one in the automatrix -->
        <!-- lib dir, and then try to compile automatrix. -->
        <copy file="${gpunit.dir}/dist/gp-unit.jar" todir="./automatrix/website/WEB-INF/lib" />
        <ant antfile="automatrix/build.xml" target="createWar" useNativeBasedir="true" />
    </target>

    <target name="gpunit-junit-tests" depends="init, package"
        description="run junit test of the GpUnit source code">
        <property name="junit.results.dir" location="./junit" />
        <mkdir dir="${junit.results.dir}" />
        <junit showoutput="true" printsummary="true" >
            <classpath>
                <pathelement location="${gpunit.dir}/classes"/>
                <fileset dir="${gpunit.dir}/src/test/lib" >
                    <include name="**/*.jar"/>
                </fileset>
                <path refid="dependencies.classpath" />
                <pathelement location="${client.lib.dir}/GenePattern.jar" />
            </classpath>
            <test name="org.genepattern.gpunit.yaml.PropertyExpansionTests" outfile="gpunit-junit" todir="${junit.results.dir}" >
                <formatter type="xml"/>
            </test>
        </junit>
    </target>

    <!-- Import module test suite targets and fileset definitions -->
    <import file="buildsuites.xml" />

</project>
